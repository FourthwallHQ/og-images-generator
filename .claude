# CLAUDE - Important Notes for Future Development

## @vercel/og CSS Limitations and Solutions

When working with @vercel/og for image generation, be aware of these CSS limitations:

### 1. Basic CSS Support
@vercel/og doesn't support all CSS properties. Stick to:
- display, position, top, left, right, bottom
- width, height, padding, margin
- backgroundColor, color
- fontSize, fontFamily, fontWeight
- objectFit for images

### 2. Critical @vercel/og Rules

**NEVER DO THIS:**
```jsx
// ❌ WRONG - zIndex with units
style={{ zIndex: 1px }}  // Will cause "Expected style zIndex to be unitless" error

// ❌ WRONG - Multiple children without proper display
<div>
  <Child1 />
  <Child2 />
</div>  // Will cause "Expected <div> to have explicit display: flex, display: contents, or display: none"

// ❌ WRONG - Complex wrapper components
<ProductImage>
  <img />
</ProductImage>
```

**ALWAYS DO THIS:**
```jsx
// ✅ CORRECT - zIndex without units (or omit it)
style={{ zIndex: 1 }}  // Or just don't use zIndex with absolute positioning

// ✅ CORRECT - Multiple children with display: flex
<div style={{ display: 'flex' }}>
  <Child1 />
  <Child2 />
</div>

// ✅ CORRECT - Use img tags directly for @vercel/og
<img src={url} style={{ width: 820, height: 1093 }} />

// ✅ CORRECT - Numeric values without 'px' in styles
style={{
  position: 'absolute',
  top: 100,        // Not '100px'
  left: 100,       // Not '100px'
  width: 820,      // Not '820px' when numeric
  height: 1093,    // Not '1093px' when numeric
}}
```

### 3. Absolute Positioning Pattern
For overlapping images with absolute positioning:
```jsx
<div style={{ display: 'flex', flexDirection: 'column' }}>
  <div style={{ position: 'relative', display: 'flex', width: '100%', height: '100%' }}>
    <img style={{ position: 'absolute', top: 100, left: 100 }} />
    <img style={{ position: 'absolute', bottom: 100, right: 100 }} />
  </div>
</div>
```

### 4. Common Error Messages and Solutions

| Error | Cause | Solution |
|-------|-------|----------|
| "Expected style zIndex to be unitless" | Using `zIndex: 1px` or similar | Remove units or remove zIndex entirely |
| "Expected <div> to have explicit display" | Multiple children without display property | Add `display: 'flex'` to parent |
| "Failed to parse CSS" | Complex CSS properties | Use only basic CSS properties |

### 5. Logo Display Issues
- Complex nested div structures don't work well
- Use simple img tags directly
- Example of working logo code:
```jsx
<img
  src={logoUrl}
  alt="Shop Logo"
  style={{
    maxWidth: '60%',
    maxHeight: '50%',
    objectFit: 'contain',
  }}
/>
```

### 6. Font Loading
- Always load required fonts (like Suisse Int'l) locally
- Use fallback fonts when external fonts fail to load
- Current implementation loads Suisse Int'l for "Powered by" text

## Bundle Images Specific Notes

- Support only 2-3 products (removed 1, 4, 5+ product layouts)
- Use absolute positioning for overlapping effect
- Fixed dimensions: 820x1093px per image (3:4 aspect ratio)
- 100px padding from edges
- Transparent background